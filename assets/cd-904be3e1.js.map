{"version":3,"file":"cd-904be3e1.js","sources":["C:/Users/KgBear/desktop/OCHIN_ForFun/js_gamedev/src/CollisionDetection/main.ts"],"sourcesContent":["import { Circle, getDist, isCircleCollided } from \"../lib\";\r\n\r\nconst cv = document.querySelector(\"canvas\");\r\nif (cv === null) throw new Error(\"canvas is null\");\r\nconst ctx = cv.getContext(\"2d\");\r\nif (ctx === null) throw new Error(\"ctx is null\");\r\n\r\nctx.font = cv.style.font;\r\n\r\ncv.width = 1280;\r\ncv.height = 720;\r\n\r\n//set initial mouse x/y coords to center of canvas\r\nconst mouse = {\r\n  x: Math.round(cv.width / 2),\r\n  y: Math.round(cv.height / 2),\r\n};\r\n\r\n//update mouse x/y coords relative to the centerd canvas and view port\r\ndocument.onmousemove = (evt) => {\r\n  const rect = cv.getBoundingClientRect();\r\n  mouse.x = Math.round(evt.clientX - rect.left);\r\n  mouse.y = Math.round(evt.clientY - rect.top);\r\n};\r\n\r\nlet moving: Circle;\r\nlet stationary: Circle;\r\n\r\nconst movingInitialColor = \"green\";\r\nconst stationaryInitialColor = \"blue\";\r\nconst collidedColor = \"red\";\r\nconst main = () => {\r\n  moving = new Circle(ctx, 0, 0, 100, movingInitialColor);\r\n  const centerX = cv.width / 2;\r\n  const centerY = cv.height / 2;\r\n  stationary = new Circle(ctx, centerX, centerY, 100, stationaryInitialColor);\r\n};\r\n\r\nconst animate = () => {\r\n  requestAnimationFrame(animate);\r\n\r\n  ctx.clearRect(0, 0, cv.width, cv.height);\r\n  ctx.fillStyle = \"blue\";\r\n  ctx.font = \"24px Arial\";\r\n\r\n  stationary.updateFill();\r\n\r\n  moving.x = mouse.x;\r\n  moving.y = mouse.y;\r\n  moving.updateFill();\r\n\r\n  const distance = getDist(moving.x, moving.y, stationary.x, stationary.y);\r\n  const fillTextLeftMargin = 16 * 7;\r\n\r\n  //Moving\r\n  ctx.fillStyle = \"black\";\r\n  ctx.fillText(`dist:${distance}`, mouse.x + fillTextLeftMargin, mouse.y);\r\n  ctx.fillText(`x:${mouse.x}`, mouse.x + fillTextLeftMargin, mouse.y + 30);\r\n  ctx.fillText(\r\n    `y:${Number(mouse.y.toFixed(2))}`,\r\n    mouse.x + fillTextLeftMargin,\r\n    mouse.y + 60,\r\n  );\r\n\r\n  //Stationary\r\n  ctx.fillText(\r\n    `dist:${distance}`,\r\n    stationary.x + fillTextLeftMargin,\r\n    stationary.y,\r\n  );\r\n  ctx.fillText(\r\n    `x:${stationary.x}`,\r\n    stationary.x + fillTextLeftMargin,\r\n    stationary.y + 30,\r\n  );\r\n  ctx.fillText(\r\n    `y:${stationary.y}`,\r\n    stationary.x + fillTextLeftMargin,\r\n    stationary.y + 60,\r\n  );\r\n\r\n  if (isCircleCollided(distance, moving.radius, stationary.radius)) {\r\n    moving.color = collidedColor;\r\n    stationary.color = collidedColor;\r\n    return;\r\n  }\r\n\r\n  // reset circle back to center(setting mouse coords) if circle touches canvas's vertical boundaries\r\n  const leftBoundaryCollision = moving.x <= moving.radius;\r\n  const rightBoundaryCollision = moving.radius + moving.x >= cv.width;\r\n  if (leftBoundaryCollision || rightBoundaryCollision) {\r\n    mouse.x = cv.width / 2;\r\n    mouse.y = cv.height / 2;\r\n\r\n    alert(\"canvas's x boundary hit, moving mouse back to center\");\r\n    return;\r\n  }\r\n\r\n  // reset circle back to center if circle touches canvas's horizontal boundaries\r\n  const topBoundaryCollision = moving.y <= moving.radius;\r\n  const bottomBoundaryCollision = moving.radius + moving.y >= cv.height;\r\n  if (topBoundaryCollision || bottomBoundaryCollision) {\r\n    mouse.x = cv.width / 2;\r\n    mouse.y = cv.height / 2;\r\n\r\n    alert(\"canvas's y boundary hit, moving mouse to center\");\r\n    return;\r\n  }\r\n\r\n  moving.color = movingInitialColor;\r\n  stationary.color = stationaryInitialColor;\r\n};\r\n\r\nmain();\r\nanimate();\r\n"],"names":["cv","ctx","mouse","evt","rect","moving","stationary","movingInitialColor","stationaryInitialColor","collidedColor","main","Circle","centerX","centerY","animate","distance","getDist","fillTextLeftMargin","isCircleCollided","leftBoundaryCollision","rightBoundaryCollision","topBoundaryCollision","bottomBoundaryCollision"],"mappings":"gDAEA,MAAMA,EAAK,SAAS,cAAc,QAAQ,EAC1C,GAAIA,IAAO,KAAY,MAAA,IAAI,MAAM,gBAAgB,EACjD,MAAMC,EAAMD,EAAG,WAAW,IAAI,EAC9B,GAAIC,IAAQ,KAAY,MAAA,IAAI,MAAM,aAAa,EAE/CA,EAAI,KAAOD,EAAG,MAAM,KAEpBA,EAAG,MAAQ,KACXA,EAAG,OAAS,IAGZ,MAAME,EAAQ,CACZ,EAAG,KAAK,MAAMF,EAAG,MAAQ,CAAC,EAC1B,EAAG,KAAK,MAAMA,EAAG,OAAS,CAAC,CAC7B,EAGA,SAAS,YAAeG,GAAQ,CACxB,MAAAC,EAAOJ,EAAG,wBAChBE,EAAM,EAAI,KAAK,MAAMC,EAAI,QAAUC,EAAK,IAAI,EAC5CF,EAAM,EAAI,KAAK,MAAMC,EAAI,QAAUC,EAAK,GAAG,CAC7C,EAEA,IAAIC,EACAC,EAEJ,MAAMC,EAAqB,QACrBC,EAAyB,OACzBC,EAAgB,MAChBC,EAAO,IAAM,CACjBL,EAAS,IAAIM,EAAOV,EAAK,EAAG,EAAG,IAAKM,CAAkB,EAChD,MAAAK,EAAUZ,EAAG,MAAQ,EACrBa,EAAUb,EAAG,OAAS,EAC5BM,EAAa,IAAIK,EAAOV,EAAKW,EAASC,EAAS,IAAKL,CAAsB,CAC5E,EAEMM,EAAU,IAAM,CACpB,sBAAsBA,CAAO,EAE7Bb,EAAI,UAAU,EAAG,EAAGD,EAAG,MAAOA,EAAG,MAAM,EACvCC,EAAI,UAAY,OAChBA,EAAI,KAAO,aAEXK,EAAW,WAAW,EAEtBD,EAAO,EAAIH,EAAM,EACjBG,EAAO,EAAIH,EAAM,EACjBG,EAAO,WAAW,EAEZ,MAAAU,EAAWC,EAAQX,EAAO,EAAGA,EAAO,EAAGC,EAAW,EAAGA,EAAW,CAAC,EACjEW,EAAqB,GAAK,EA6BhC,GA1BAhB,EAAI,UAAY,QACZA,EAAA,SAAS,QAAQc,CAAQ,GAAIb,EAAM,EAAIe,EAAoBf,EAAM,CAAC,EAClED,EAAA,SAAS,KAAKC,EAAM,CAAC,GAAIA,EAAM,EAAIe,EAAoBf,EAAM,EAAI,EAAE,EACnED,EAAA,SACF,KAAK,OAAOC,EAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,GAC/BA,EAAM,EAAIe,EACVf,EAAM,EAAI,EAAA,EAIRD,EAAA,SACF,QAAQc,CAAQ,GAChBT,EAAW,EAAIW,EACfX,EAAW,CAAA,EAETL,EAAA,SACF,KAAKK,EAAW,CAAC,GACjBA,EAAW,EAAIW,EACfX,EAAW,EAAI,EAAA,EAEbL,EAAA,SACF,KAAKK,EAAW,CAAC,GACjBA,EAAW,EAAIW,EACfX,EAAW,EAAI,EAAA,EAGbY,EAAiBH,EAAUV,EAAO,OAAQC,EAAW,MAAM,EAAG,CAChED,EAAO,MAAQI,EACfH,EAAW,MAAQG,EACnB,MACF,CAGM,MAAAU,EAAwBd,EAAO,GAAKA,EAAO,OAC3Ce,EAAyBf,EAAO,OAASA,EAAO,GAAKL,EAAG,MAC9D,GAAImB,GAAyBC,EAAwB,CAC7ClB,EAAA,EAAIF,EAAG,MAAQ,EACfE,EAAA,EAAIF,EAAG,OAAS,EAEtB,MAAM,sDAAsD,EAC5D,MACF,CAGM,MAAAqB,EAAuBhB,EAAO,GAAKA,EAAO,OAC1CiB,EAA0BjB,EAAO,OAASA,EAAO,GAAKL,EAAG,OAC/D,GAAIqB,GAAwBC,EAAyB,CAC7CpB,EAAA,EAAIF,EAAG,MAAQ,EACfE,EAAA,EAAIF,EAAG,OAAS,EAEtB,MAAM,iDAAiD,EACvD,MACF,CAEAK,EAAO,MAAQE,EACfD,EAAW,MAAQE,CACrB,EAEAE,IACAI,EAAQ"}